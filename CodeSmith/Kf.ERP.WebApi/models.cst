<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Description="Create a list of properties from database table." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on."%>
<%@ Property Name="namespacename" Type="String" Default="Pufang.WebApi.Scm" Optional="false" Category="String" Description="Pufang.WebApi.Scm" %>
<%@ Property Name="ModelName" Type="String"  Optional="true" Category="String" Description="Model Name" %>
<%@ Property Name="Description" Type="String"  Optional="true" Category="String" Description="" %>
<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" Description="System to C# Type Map" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
/*
Name: Kinfar
Author: Kinfar
Description:<%=Description%>
*/
using System.Runtime.Serialization;

namespace <%=namespacename%>.Models
{
	/// <summary>
    /// <%=Description%>
    /// </summary>
    [DataContract]
    public class <%=ModelName%>
    {
<% foreach (ColumnSchema column in this.SourceTable.Columns) {  %>
		private <%= CSharpAlias[column.SystemType.FullName] %> _<%= StringUtil.ToCamelCase(column.Name)%> = <%=GetDefault(CSharpAlias[column.SystemType.FullName])%>;
		[DataMember]
		public <%= CSharpAlias[column.SystemType.FullName] %> <%= StringUtil.ToPascalCase(column.Name) %>
		{
			get { return _<%= StringUtil.ToCamelCase(column.Name) %>; }
			set { _<%= StringUtil.ToCamelCase(column.Name) %> = value; }
		}
<% } %>
    }
}
<script runat="template">
public string GetDefault(string type)
{
	string s="";
    switch(type.ToLower())
    {
        case "datetime":
        case "system.datetime":
            s="new System.DateTime(1799,1,2)";
            break;
        case "int":
        case "int?":
            s="0";
            break;
        case "decimal":
            s="0m";
            break;
        case "string":
            s="\"\"";
            break;
        case "bool":
            s="false";
            break;
        case "byte":
        case "byte[]":
            s="new byte[0]";
            break;
        default:
            break;
     }
    return s;
}
</script>